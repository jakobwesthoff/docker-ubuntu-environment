# /etc/skel/.bashrc
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
    # Shell is non-interactive.  Be done now!
    return
fi

# Source basic profile configuration even if not inside a login shell
if shopt|grep login_shell|grep -q off; then
    . /etc/profile
fi

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=50000

# Ensure the histfile ist written after each command
PROMPT_COMMAND="history -a"

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Check for color output support
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# We have color support; assume it's compliant with Ecma-48
# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
    color_prompt=yes
else
    color_prompt=
fi

# Alias definitions.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Load utillity bash functions
if [ -f ~/.bash_functions ]; then
    . ~/.bash_functions
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Set the editor to vim
export EDITOR=/usr/bin/vim

# Include $HOME/{bin,sbin} in the execpath
export PATH="$PATH:$HOME/bin:$HOME/sbin"

# enable color support of ls and also add handy aliases
if which dircolors >/dev/null; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Load the gitprompt
source ~/.gitprompt.sh

BASH_PROMPT_NAME="VM"
[ -f ~/.BASH_PROMPT_NAME ] && source ~/.BASH_PROMPT_NAME

function ps1_prompt_command() {
    local last_exit_code=$?
    if [ $last_exit_code -ne 0 ]; then
        last_exit_code=" err: ${last_exit_code}"
    else
        last_exit_code=""
    fi

    local gitbranch="$(__git_ps1)"

    if [ "$(id -u)" -eq "0" ]; then
        local username_hostname_color="0;31m"
    else
        local username_hostname_color="0;32m"
    fi

    PS1="\[\033[1;37;41m\] ${BASH_PROMPT_NAME} \[\033[0m\] \[\033[${username_hostname_color}\]\u@\h\[\033[0m\]:\[\033[0;34m\]\w\[\033[0;31m\]${last_exit_code}\[\033[0m\]\[\033[0;33m\]${gitbranch}\[\033[0m\] \$ "
}

PS1='\u@\h:\w\$ '
if [ "$color_prompt" = yes ]; then
    # The ps1_prompt_command function needs to be the first one called using
    # prompt command. Otherwise the last exitcode part won't work.
    PROMPT_COMMAND="ps1_prompt_command; ${PROMPT_COMMAND:-:}"
fi
unset color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Unmap Ctrl-S to be the stop sequence. This allows for forward search in bash
# using Ctrl-S
# This is a gnome-terminal "problem" see the given link for details:
# https://bugs.launchpad.net/ubuntu/+source/gnome-terminal/+bug/48880
stty stop undef

